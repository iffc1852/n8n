import os, time, queue, tempfile, warnings, mimetypes
import numpy as np
import sounddevice as sd
import webrtcvad
from scipy.io.wavfile import write
from faster_whisper import WhisperModel
import requests
from pydub import AudioSegment
from pydub.utils import which

# ===== 基本設定 =====
WAKE_WORD = "小文"
# ⚠️ 改成你的 Production Webhook（非 -test），並確保 workflow 已 Activate
N8N_WEBHOOK_URL = "https://jose-cigarettes-mutual-tion.trycloudflare.com/webhook/e0fba784-ca1b-4bdf-b7eb-0465aa973959"

MODEL_SIZE = "small"
SAMPLE_RATE = 16000
CHANNELS = 1
VAD_AGGRESSIVENESS = 2
SILENCE_TIMEOUT_WAKE = 1.0     # 喚醒段靜音結束時間
SILENCE_TIMEOUT_MAIN = 1.5     # 主講段靜音結束時間

# （可選）固定裝置索引，避免與其他軟體搶裝置（用 print(sd.query_devices()) 查）
INPUT_DEVICE = None   # 例如 1
OUTPUT_DEVICE = None  # 例如 3

# 你的喚醒確認音檔（支援 wav/mp3/ogg/webm），請放到同資料夾或自訂路徑
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
WAKE_CONFIRM_FILE = os.path.join(PROJECT_DIR, "answer.ok.mp3")  # ← 換成你的檔名

warnings.filterwarnings("ignore", category=UserWarning)
sd.default.samplerate = SAMPLE_RATE
sd.default.channels = CHANNELS

# 暫存資料夾
TEMP_DIR = os.path.join(tempfile.gettempdir(), "ai_bot")
os.makedirs(TEMP_DIR, exist_ok=True)
WAKE_WAV  = os.path.join(TEMP_DIR, "wake.wav")
INPUT_WAV = os.path.join(TEMP_DIR, "input.wav")

# 指定 ffmpeg 路徑（若未加入 PATH 請改成你的 ffmpeg.exe）
AudioSegment.converter = which("ffmpeg") or r"C:\ffmpeg\bin\ffmpeg.exe"

print("🧠 載入 faster-whisper 模型中（CPU / int8）...")
model = WhisperModel(MODEL_SIZE, device="cpu", compute_type="int8")
print("🖥️ 已啟用 CPU 模式（int8）")

vad = webrtcvad.Vad(VAD_AGGRESSIVENESS)
FRAME_DURATION_MS = 30
FRAME_SIZE = int(SAMPLE_RATE * FRAME_DURATION_MS / 1000)

# ============ 小工具 ============
def has_wake_word(text: str) -> bool:
    """寬鬆匹配喚醒詞：移除空白後再比對"""
    return bool(text) and (WAKE_WORD in text.replace(" ", ""))

# ---------- 喚醒確認音：啟動時預先解碼，之後快速播放 ----------
WAKE_WAVE_F32 = None  # 會在啟動時載入
def prepare_wake_confirm():
    """將 WAKE_CONFIRM_FILE 解碼成與系統相容的 float32 波形，存到記憶體。"""
    global WAKE_WAVE_F32
    try:
        if not os.path.exists(WAKE_CONFIRM_FILE):
            print("⚠️ 找不到喚醒音檔：", WAKE_CONFIRM_FILE)
            WAKE_WAVE_F32 = None
            return

        seg = AudioSegment.from_file(WAKE_CONFIRM_FILE)         # 自動判斷格式
        seg = seg.set_channels(CHANNELS).set_frame_rate(SAMPLE_RATE)

        samples = np.array(seg.get_array_of_samples())
        if seg.channels == 2:
            samples = samples.reshape((-1, 2))
        denom = float(1 << (8 * seg.sample_width - 1))
        WAKE_WAVE_F32 = (samples.astype(np.float32) / denom)
        print("🔔 喚醒音已載入：", WAKE_CONFIRM_FILE)
    except Exception as e:
        print("❌ 載入喚醒音失敗：", e)
        WAKE_WAVE_F32 = None

def play_wake_confirm():
    """播放預載的喚醒音；若未載入則用短 beep 後備。"""
    try:
        sd.stop()
    except Exception:
        pass
    if WAKE_WAVE_F32 is not None:
        try:
            sd.play(WAKE_WAVE_F32, samplerate=SAMPLE_RATE, device=OUTPUT_DEVICE, blocking=True)
            sd.stop()
            time.sleep(0.1)
            return
        except Exception as e:
            print("（播放預載喚醒音失敗，改用 beep）", e)
    # 後備：短 beep
    dur = 0.12
    t = np.linspace(0, dur, int(SAMPLE_RATE*dur), False)
    wave = (np.sin(2*np.pi*1000*t) * 0.25).astype(np.float32)
    sd.play(wave, samplerate=SAMPLE_RATE, blocking=True)
    sd.stop()
    time.sleep(0.05)

# ============ 錄音 / STT ============
def record_until_silence(silence_timeout: float):
    q_frames = queue.Queue()
    audio_chunks = []
    last_voice = time.time()

    def cb(indata, frames, time_info, status):
        q_frames.put(bytes(indata))

    print(f"🎙️ 錄音中（靜音>{silence_timeout:.1f}s 自動結束）...")
    try:
        with sd.RawInputStream(samplerate=SAMPLE_RATE, blocksize=FRAME_SIZE,
                               dtype="int16", channels=CHANNELS, callback=cb,
                               device=INPUT_DEVICE):
            while True:
                frame = q_frames.get()
                is_speech = vad.is_speech(frame, SAMPLE_RATE)
                if is_speech:
                    last_voice = time.time()
                    audio_chunks.append(np.frombuffer(frame, dtype=np.int16))
                elif audio_chunks and (time.time() - last_voice) > silence_timeout:
                    break
    except Exception as e:
        print("❌ 錄音錯誤：", e)
        sd.stop()
        return None

    # 離開 with 後輸入流已關閉；保險停一次
    sd.stop()

    if not audio_chunks:
        print("🔇 未偵測到有效人聲")
        return None
    return np.concatenate(audio_chunks)

def transcribe_np_int16(audio_np, lang=None):
    audio_f32 = audio_np.astype(np.float32) / 32768.0
    segments, _ = model.transcribe(audio_f32, language=lang, beam_size=5)
    return "".join(seg.text for seg in segments).strip()

def save_wav(path, audio_np):
    write(path, SAMPLE_RATE, audio_np)

# ============ 與 n8n 溝通 ============
def send_to_n8n(wav_path):
    try:
        print("📡 傳送音訊到 n8n...")
        with open(wav_path, "rb") as f:
            files = {"audio_file": ("voice.wav", f, "audio/wav")}
            resp = requests.post(N8N_WEBHOOK_URL, files=files, timeout=180)

        ctype = resp.headers.get("Content-Type", "")
        print("🔍 n8n 回傳 Content-Type:", ctype)

        # 音訊類型才存為播放檔
        if resp.status_code == 200 and ctype.startswith("audio/"):
            ext = mimetypes.guess_extension(ctype.split(";")[0]) or ".bin"
            reply_path = os.path.join(TEMP_DIR, f"reply{ext}")
            with open(reply_path, "wb") as out:
                out.write(resp.content)
            print("📩 收到回覆音訊 →", reply_path)
            return reply_path

        # 若非音訊回傳，寫入錯誤檔便於除錯
        err_path = os.path.join(TEMP_DIR, "reply_error.txt")
        with open(err_path, "wb") as out:
            out.write(resp.content)
        print(f"⚠️ 非音訊回傳（{resp.status_code}）已寫入：{err_path}")
        return None

    except Exception as e:
        print("❌ 上傳失敗：", e)
        return None

# ============ 播放 n8n 回覆（pydub 解碼 → sounddevice 播放） ============
def play_audio_any(path):
    if not path or not os.path.exists(path):
        print("⚠️ 找不到回覆音訊")
        return
    try:
        print("🔊 播放回覆中（自動解碼）...")
        seg = AudioSegment.from_file(path)                 # 自動判斷格式
        seg = seg.set_channels(CHANNELS).set_frame_rate(SAMPLE_RATE)

        # 轉成 numpy float32 (-1.0 ~ 1.0)
        samples = np.array(seg.get_array_of_samples())
        if seg.channels == 2:
            samples = samples.reshape((-1, 2))
        denom = float(1 << (8 * seg.sample_width - 1))
        audio_f32 = (samples.astype(np.float32) / denom)

        sd.stop()
        sd.play(audio_f32, samplerate=SAMPLE_RATE, device=OUTPUT_DEVICE, blocking=True)
        sd.stop()
        time.sleep(0.2)  # 給驅動收尾，避免連續切換時崩潰
    except Exception as e:
        print("❌ 播放失敗：", e)
        sd.stop()

# ============ 主流程 ============
if __name__ == "__main__":
    # 啟動先載入你提供的喚醒音檔
    prepare_wake_confirm()

    print(f"🤖 智慧機器人（喚醒音檔版）啟動完成！說出「{WAKE_WORD}」喚醒我。")
    while True:
        try:
            # 1) 等待喚醒
            wake_audio = record_until_silence(SILENCE_TIMEOUT_WAKE)
            if wake_audio is None:
                continue
            save_wav(WAKE_WAV, wake_audio)
            wake_text = transcribe_np_int16(wake_audio, lang="zh")  # 喚醒段固定用中文較穩
            print("🗣️ 喚醒辨識：", wake_text)

            if not has_wake_word(wake_text):
                print("💤 未偵測到喚醒詞，持續監聽…\n")
                continue

            # 2) 喚醒成功：播放你自備的喚醒音檔
            play_wake_confirm()

            # 3) 主講階段
            print("✅ 喚醒成功！請開始說話…")
            main_audio = record_until_silence(SILENCE_TIMEOUT_MAIN)
            if main_audio is None:
                print("⚠️ 沒收到主講內容，回到待命\n")
                continue
            save_wav(INPUT_WAV, main_audio)

            # （可選）預覽轉文字
            try:
                preview = transcribe_np_int16(main_audio, lang=None)
                print("📝 主講轉文字（預覽）：", preview)
            except Exception as e:
                print("（預覽轉文字失敗，不影響上傳）", e)

            # 4) 送 n8n，播放回覆，回到待命
            reply_path = send_to_n8n(INPUT_WAV)
            play_audio_any(reply_path)
            print(f"🔁 回到待命狀態…（說『{WAKE_WORD}』可再次喚醒）\n")

        except KeyboardInterrupt:
            print("\n🛑 已手動結束程式。")
            break
        except Exception as e:
            print("⚠️ 發生例外：", e)
            time.sleep(1)
